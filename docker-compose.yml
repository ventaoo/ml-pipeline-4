services:
     decryptor:
          build: 
               context: .
               dockerfile: ./Dockerfile.decryptor
          image: zwttt/decryptor:latest
          command: bash -c "chmod +x ./decrypt_secrets.sh && ./decrypt_secrets.sh"
          environment:
               - VAULT_PASSWORD=${VAULT_PASSWORD}
               - ENCRYPTED_FILE=${ENCRYPTED_FILE}
          volumes:
               - shared-data:/shared

     kafka:
          image: bitnami/kafka:latest
          ports:
               - "9092:9092"
               - "9093:9093"  # 添加 Controller 监听端口
          environment:
               # KRaft 核心配置
               KAFKA_CFG_PROCESS_ROLES: "broker,controller"
               KAFKA_CFG_NODE_ID: 1
               KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"  # 格式：node_id@host:port
               
               # 监听器配置（关键修复）
               KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
               KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
               KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
               KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"  # 指定 Controller 监听器
               
               # 单节点集群优化
               KAFKA_CFG_NUM_PARTITIONS: 1
               KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          healthcheck:
               test: |
                    bash -c ' \
                         /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list \
                         && exit 0 || exit 1 \
                    '
               interval: 10s
               timeout: 5s
               retries: 10

     server:
          build: .
          command: bash -c "chmod +x ./secrets/init_env.sh && ./secrets/init_env.sh && python src/db.py && python src/preprocess.py && python src/train.py && pytest src/tests/ --cov=src --cov-report=html && uvicorn src.api.app:app --host 0.0.0.0 --port 8000 --reload"
          ports:
               - 8000:8000
          image: zwttt/ml-pipeline-4:latest
          environment:
               DB_HOST: ${DB_HOST}
               DB_PORT: ${DB_PORT}
               DB_NAME: ${DB_NAME}
               DB_USER: ${DB_USER}
               DB_PASSWORD: ${DB_PASSWORD}
               KAFKA_BOOTSTRAP_SERVERS: kafka:9092
          depends_on:
               decryptor:
                    condition: service_completed_successfully
               postgres:
                    condition: service_healthy
               kafka:
                    condition: service_healthy
          volumes:
               - shared-data:/shared  # 共享 volume，能访问解密后的文件
     
     postgres:
          image: postgres:latest
          # command: bash -c "chmod +x ./secrets/init_env.sh && ./secrets/init_env.sh"
          ports:
               - 5432:5432
          depends_on:
               - decryptor
          # @TODO ? 可能可以直接volumes 传入env文件
          # env_file:
          #      - fileName
          environment:
               POSTGRES_DB: ${DB_NAME}
               POSTGRES_USER: ${DB_USER}
               POSTGRES_PASSWORD: ${DB_PASSWORD}
          healthcheck:
               test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
               interval: 5s
               timeout: 5s
               retries: 5
          volumes:
               - shared-data:/shared  # 共享 volume，能访问解密后的文件
volumes:
  shared-data:  # 定义共享的 volume