services:
     kafka:
          image: bitnami/kafka:latest
          ports:
               - "9092:9092"
               - "9093:9093"  # 添加 Controller 监听端口
          environment:
               # KRaft 核心配置
               KAFKA_CFG_PROCESS_ROLES: "broker,controller"
               KAFKA_CFG_NODE_ID: 1
               KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"  # 格式：node_id@host:port
               
               # 监听器配置（关键修复）
               KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
               KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
               KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
               KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"  # 指定 Controller 监听器
               KAFKA_TOPIC: "dev-model-results" 
               
               # 单节点集群优化
               KAFKA_CFG_NUM_PARTITIONS: 1
               KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          healthcheck:
               test: |
                    bash -c ' \
                         /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list \
                         && exit 0 || exit 1 \
                    '
               interval: 10s
               timeout: 5s
               retries: 10

     server:
          build: .
          command: |
               bash -c " 
                    python src/db.py &&
                    python src/preprocess.py &&
                    python src/train.py && 
                    
                    uvicorn src.api.app:app --host 0.0.0.0 --port 8000 --reload & 
                    
                    echo '等待API服务启动...' &&
                    while ! nc -z localhost 8000; do 
                         sleep 1 
                    done && 
                    
                    echo '开始执行测试...' &&
                    pytest src/tests/ --cov=src --cov-report=html && 
                    echo '测试完成...'
                    
                    tail -f /dev/null
                    "
          ports:
               - 8000:8000
          image: zwttt/ml-pipeline-4:latest
          environment:
               DECRYPT_FILE_PATH: ./secrets/db
               DECRYPT_PASSWORD: ${DECRYPT_PASSWORD}
               OUTPUT_FILE: ./env
               BASE_API_URL: http://localhost:8000
          depends_on:
               postgres:
                    condition: service_healthy

     postgres:
          image: postgres:latest
          ports:
               - 5432:5432
          environment:
               POSTGRES_DB: ${DB_NAME}
               POSTGRES_USER: ${DB_USER}
               POSTGRES_PASSWORD: ${DB_PASSWORD}
          healthcheck:
               test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
               interval: 5s
               timeout: 5s
               retries: 5