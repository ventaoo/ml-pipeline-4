pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDS=credentials('ba7bf351-123e-409d-8d95-1c72fb78ffe4')  // 引用 Jenkins 凭据

        POSTGRES_DB=credentials('db-name')
        POSTGRES_USER=credentials('db-user')
        POSTGRES_PASSWORD=credentials('db-password')
        DECRYPT_PASSWORD=credentials('ansible-vault-password')
        
        IMAGE_TAG = 'zwttt/ml-pipeline-4:latest'

        LC_ALL = "en_US.UTF-8"
        LANG    = "en_US.UTF-8"
        LANGUAGE = "en_US.UTF-8"
    }

    options {
        timestamps()
        skipDefaultCheckout(true)
    }

    stages {
        stage('Clone Repository') {
            steps {
                cleanWs()
                git branch: 'main', url: 'https://github.com/ventaoo/ml-pipeline-4.git'
            }
        }

        stage('Login to DockerHub') {
            steps {
                sh 'echo $DOCKERHUB_CREDS_PSW | docker login -u $DOCKERHUB_CREDS_USR --password-stdin'
            }
        }
        
        // 阶段 1：构建并运行 Docker 容器
        stage('Create and run docker container') {
            steps {
                script {
                    dir('ml-pipeline-4') {
                        // 尝试构建镜像，无论成功与否都启动容器
                        withCredentials([
                            // Прямой ввод используется только для инициализации базы данных
                            string(credentialsId: 'db-name', variable: 'DB_NAME'),
                            string(credentialsId: 'db-user', variable: 'DB_USER'),
                            string(credentialsId: 'db-password', variable: 'DB_PASSWORD'),
                            string(credentialsId: 'ansible-vault-password', variable: 'DECRYPT_PASSWORD')
                        ]) {
                            try {
                                sh 'docker-compose build'
                            } finally {
                                sh 'docker-compose up -d'
                            }
                        }
                    }
                }
            }
        }

        // 阶段 2：检查容器日志
        stage('Checkout container logs') {
            steps {
                dir('ml-pipeline-4') {
                    script {
                        // 获取所有匹配的容器ID（可能多行）
                        def containerIds = sh(
                            script: 'docker ps -qf "name=^ml-pipeline-4"',
                            returnStdout: true
                        ).trim()

                        if (containerIds.isEmpty()) {
                            echo "No container running"
                        } else {
                            // 按行分割容器ID，逐个处理
                            containerIds.split('\n').each { id ->
                                echo "Fetching logs for container: ${id}"
                                sh "docker logs --tail 1000 ${id}"
                            }
                        }
                    }
                }
            }
        }

        // 阶段 3：检查测试覆盖率报告
        stage('Checkout coverage report') {
            steps {
                dir('ml-pipeline-4') {
                    // 显示容器日志的最后 10 行（含时间戳）
                    sh 'docker-compose logs -t --tail 100'
                }
            }
        }

        // 阶段 4：推送镜像到 DockerHub
        stage('Push') {
            steps {
                sh 'docker push zwttt/ml-pipeline-4'
            }
        }
    }
    
    post {
        success {
            // 触发 CD 流水线，传递 env.IMAGE_TAG 参数
            build job: 'ml-cd-pipeline-4', 
                  parameters: [string(name: 'IMAGE_TAG', value: env.IMAGE_TAG)], // ✅ 正确：通过 env 访问
                  wait: false
        }
        always {
            sh 'docker logout'
        }
    }   
}